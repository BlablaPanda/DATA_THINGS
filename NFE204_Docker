 Lundi 24 février: Chapitre Docker
 Lundi 2 mars: modélisation de documents structurés (chapitre 3)
   5 mars => regroupement par visio  
 Lundi 9 mars: interrogation de bases structurées (chapitre 4)

1.I.Introduction


un chapitre par semaine
4 grandes parties
-modélisation sous forme de document
-gestion de très grandes collections
-distribution du stockage
-distribution des caculs

-Document (mongoDB, CouchDB, Cassandra)
-Recherche(Solr,ElasticSearch)
-stockage(MongoDB,ElasticSearch,Cassandra)
-Calcul(Hadoop,Spark,Flink)

Les projets + examens
le rapport écrit 1/3 + examen 2/3


2. Chapitre I Docker

http://b3d.bdpedia.fr/docker.html
Docker -> simuler un systeme distribué

Définition de base
-Un serveur machine (IP addresse internet)
-un Serveur logiciel(un processus exécuté en tache de fond d'un serveur machine qui comunique avec des client (logiciels) via un port
-Une machine virtuelle 
-Un client(logiciel) un programme qui communique avec un serveur(logiciel)
  On ne peut pas lancer deux serveur sur un même port
  param: addresse IP, Port, Application de Client
 
 Docker:
  -créer des conteneurs linux (machine virtuelle simplifée)
  -Cas OS/Win VM docker fournir Docker engine -> Créer des conteneur
  -Architecture 
    ->Système Hote 
    -> Machine Docker 
    -> Docker engine (gérer les conteneurs)
    -> conteneur(une partie autonome de la docker VM se comporte comme une machine independante)
    -> Client docker (client utilitaire communiquer avec la machine Docker envoyer les commande | ligne commande/interface comme kitmatic)
   
   -Image = système pré-configuré, prêt à l'emploi (instantier)
   
   -Communication:  service de hote -> VM port & VM Conteneur port  
   
   -Pratique
    -commande basic
     docker-mahcine (gérer machine)
     docker-machine ip
     docker-machine stop
     docker (gérer conteneur)
     docker images
     docker ps (conteneur installé)
     docker start ID_conteneur (lancer conteneur)
     docker run name_conteneur (installer conteneur)
    -installer image
     hub.docker.com -> pour trouver l'image proposé par docker + doc
     docker run --name image -p port(machine:conteneur) -e option -d image_installé
     
3.Modélisation de bases NoSQL

 S.1 Document structure.
 
  -Flexibilité: la structure doit pouvoir s’adapter à des variations plus ou moins importantes; prenons un document représentant un livre ou une documentation technique: on peut avoir (ou non) des annexes, des notes de bas de pages, tout un ensemble d’éléments éditoriaux qu’il faut pouvoir assembler souplement.
  -Richesse de la structure: il faut pouvoir imbriquer des tableaux, des listes, des agrégats pour créer des structures complexes.
  -Autonomie: quand deux systèmes échangent un document, toutes les informations doivent être incluses dans la représentation; en particulier, les données doivent être auto-décrites: le contenu vient avec sa propre description.
  -Sérialisation: la sérialisation désigne la capacité à coder un document sous la forme d’une séquence d’octets qui peut « voyager » sans dégradation sur le réseau, une propriété essentielle dans le cadre d’un système distribué.


  Json
  - liste/objet/agréga
  - tableau
  xml
  -noeud

une base relationnelle : structure(le schéma)  et contenue(la base)
 -évider redondance -> source majeur d'incoherence
 -évider chemin d'accès privilégié
une arboresente(doc structuré): autonomie, flexibilité
 - pour des données régulière e d'éviter les jointure
 
Quand utiliser une base documentaire ?
 - quand les documents continnet peu ou pas de référence
 - quand on peut se permettre la redondance total / partielle (peu de Maj)
 - On veut traiter très gros volumes de manière "scalable" 
 une struture régulière ? 
 beacoup de références ? -
 le strututure d'un document est elle fix et prévisible ?
 
 Si oui,ce n'est pas nécessaire de mettre en place en nosql
 
 
 Documents Struturé=imbrication des structures
 + 
   Pas jointure(sauf des sources différentes)
   Pas de transaction
   Adaptation à la distribution
 - 
   chemin d'accès privilégié
   entités ne sont plus autonomes
   Redondance->La redondance crée inhcorent
   Pas de langage de requête
   Pas de schéma (Pas de contrôles)
   Pas de transaction(Ne convient pas pour bcp d'application)
  
  Quand utilise une base documentaire ?
  -données très spécifiques ou faiblement struturées
  -Peu de mise à jour, beacoup de lecture la redondance ne pose pas de pbm
  -On veut traiter de très gros volumes de manière "scalable"
  -De forts besoins en temps réel
  Sinon, c'est mieux d'avoir relationnelle  (redondante, prévisible,)

